#ifndef SMIRC_CONTEXT_H
#define SMIRC_CONTEXT_H

#include <stdbool.h>
#include <stdint.h>

#include "vk.h"

/*
  Original Intention:

  The context is a SMIRC programs interface to the 'outer world', i.e. the
  computer system that it exists in.

  The context struct abstracts the computer system. Currently it just wraps SDL
  & Vulkan to support many platforms, although the ambition is to have different
  SMIRC programs support contexts with arbitrary capabilities, meaning they
  could be compiled and run on a system without SDL or Vulkan support by
  specifying a different context.

  Impl:
  Currently we maintain a dependency chain struct of resources from vk.h that
  simplifies initialize & destruction routines to a format that makes them
  each simple enough to be generated by a meta language in the future.

  The dependency chain is intended to be long lasting over the duration of a
  SMIRC process and maintains handles to system resources that can be utilized
  by a higher level language.

  An acyclic dependency graph is most likely a more suitable structure for use
  cases beyond initialization & destruction (actually utilizing system resource
  handles in the structure in a real time program, updating them, and reconfiguring
  them).
*/

typedef struct {
} ContextSession;

typedef struct SDL_Window SDL_Window;
typedef struct {
    ContextSession session; 
    SDL_Window* window;
} LINKWindow;

typedef struct {
    LINKWindow l_window;
    PFN_vkGetInstanceProcAddr vkGetInstanceProcAddr;
} LINKGetInstanceProcAddr;

typedef struct {
    LINKGetInstanceProcAddr l_get_proc_addr;
    VulkanInstance vk;
} LINKVulkanInstance;

typedef struct {
    LINKVulkanInstance l_vk;
    VkSurfaceKHR surface;
} LINKVulkanSurface;

typedef struct {
    LINKVulkanSurface l_surface;
    VulkanPhysicalDeviceList physical_devices;
} LINKVulkanPhysicalDeviceList;

typedef struct {
    LINKVulkanPhysicalDeviceList l_physical_devices;
    VulkanDevice vd;
} LINKVulkanDevice;

typedef struct {
    LINKVulkanDevice l_vd;
    VulkanDeviceContext device_context;
} LINKVulkanDeviceContext;

typedef struct {
    LINKVulkanDeviceContext l_device_context;
    VulkanShaders shaders;
} LINKVulkanShaders;

typedef struct {
    LINKVulkanShaders l_shaders;
    VulkanSwapchain vk_swapchain;
} LINKVulkanSwapchain;

typedef struct {
    LINKVulkanSwapchain l_swapchain;
    VulkanSwapchainImages swapchain_images;
} LINKVulkanSwapchainImages;

typedef LINKVulkanSwapchainImages Context;

bool context_init(Context* context);

void context_destroy(Context* context);

void context_sleep(Context* context, uint32_t ms);

// TODO logging

#endif
